# Using flow builder

This tutorial will show how to properly use flow builder to process messages
and events generated by devices.

.. note::

- Who is this for: entry-level users
- Level: basic
- Reading time: 25 min

.. contents:: Table of Contents
:local:
:depth: 1

## Dojot nodes

.. contents::
:local:

## Device Event in

> Use data retrieved from a previously configured sensor as initial input to flow.

.. \_event-device-in:
.. image:: images/nodes/event-device-in.png
:width: 20%
:align: left
:alt: device_node

This node specifies that messages received from or sent to a particular device.

.. note::
If the the device that triggers a flow is removed, the flow won't work anymore.

```json
{
  "data": {
    "attrs": {
      "temperature": 10,
      "some-static-attr": "efac"
    }
  }
}
```

This structure can be referenced in nodes like `Template`\_ such as:

```
    Sample message {{payload.data.attrs.temperature}}
```

To configure the device in node, a window like :numref:`event-device-in-panel`
will be displayed.

#### Image

.. \_event-device-in-panel:
.. figure:: images/nodes/event-device-in-panel.png
:width: 50%
:align: center
:alt: devicein_node_cfg

    : Device in configuration window

#### Inputs

- **Name** _(optional)_: Name of the node
- **Device** _(required)_: The _dojot_ device that will trigger the flow
- **Events** _(required)_: Select which events will trigger this flow. The
  `Actuation` option will select actuation messages (those sent to the device)
  and `Publication` will select all messages published by the device.

#### Outputs

    Input data received to start the flow

## Template-event in

> Use data retrieved from a previously configured sensor as initial input to flow.

.. \_event-template-in:
.. image:: images/nodes/event-template-in.png
:width: 20%
:align: left
:alt: devicetemplatein_node

This node will specifies that messages from devices composed by a particular
template will trigger this flow. For instance, if the device template set in
this node is template A, all devices that are composed with template A will
trigger the flow. For example: _device1_ is composed by templates [A,B],
_device2_ by template A and _device3_ by template B. Then, in that scenario,
only messages from _device1_ and _device2_ will initiate the flow, because
template A is one of the templates that compose those devices.

.. \_event-template-in-panel:
.. figure:: images/nodes/event-template-in-panel.png
:width: 50%
:align: center
:alt: devicetemplatein_node

    : Device template in configuration window

#### Inputs

- **Name** _(optional)_: Name of the node.
- **Device** _(required)_: The _dojot_ device that will trigger the flow.
- **Events** _(required)_: Select which event will trigger this flow.
  `Creation`, `Update`, `Removal` are related to device management operations.
  `Actuation` will trigger this flow in case of sending actuation messages to
  the device and `Publication` will trigger this flow whenever a device
  publishes a message to dojot.

#### Outputs

    Input data received to start the flow

## Multi device out

> Set a new value for a device, based on the results operations on the flow.

.. \_multi-device-out:
.. image:: images/nodes/multi-device-out.png
:width: 20%
:align: left
:alt: deviceout_node

Device out will determine which device (or devices) will have its attributes
updated on _dojot_ according to the result of the flow. Bear in mind that this
node doesn't send messages to your device, it will only update the attributes
on the platform. Normally, the chosen device out is a _virtual device_, which
is a device that exists only on _dojot_.

#### Images

.. \_multi-device-out-panel:
.. figure:: images/nodes/multi-device-out-panel.png
:width: 50%
:align: center
:alt: deviceout_node_cfg

    : Device out config window

#### Inputs

- **Name** _(optional)_: Name of the node.
- **Action** _(required)_: Which device will receive the update. Options are:
  - `The device that triggered the flow`: this will update the same device
    that sent the message which triggered this flow.
  - `Specific device(s)`: which device(s) that will receive the update.
  - `Device(s) defined during the flow`: which device(s) that will receive the
    update. This is referenced by a list of values, just as with output
    values (msg.list_of_devices).
- **Device** _(required)_: Select "The device that triggered the flow" will
  make the device that was the entry-point be the end-point of the flow.
  "Specific device" any chosen device wil be the output of the flow and "a
  device defined during the flow" will make a device that the flow selected
  during the execution the endpoint.
- **Source** _(required)_: Data structure that will be mapped as message to
  device out

#### Outputs

The device will be updated by its **Source** attribute with the received value from the flow.

## Multi actuate

> This nodes allows send messages to a real device.

.. \_multi-actuate:
.. image:: images/nodes/multi-actuate.png
:width: 20%
:align: left
:alt: actuate_node

As example we could actuate to turn the light off in a lamp that receives actuation via Dojot.

#### Image

.. \_multi-actuate-panel:
.. figure:: images/nodes/multi-actuate-panel.png
:width: 50%
:align: center
:alt: actuate_node_cfg

    : Actuate configuration

#### Inputs

- **Name** _(optional)_: Name of the node.
- **Action** _(required)_: which device a message will be sent to. Options are:
  - `The device that triggered the flow`: this will send a message to
    the same device that sent the message which triggered this flow.
  - `Specific device(s)`: which device(s) the message will be sent to.
  - `Device(s) defined during the flow`: which device(s) the message will be
    sent to. This is referenced by a list of values, just as with output
    values (msg.list_of_devices).
- **Device** _(required)_: Select "The device that triggered the flow" will
  make the device that was the entry-point be the end-point of the flow.
  "Specific device" any chosen device wil be the output of the flow and "a
  device defined during the flow" will make a device that the flow selected
  during the execution the endpoint.
- **Source** _(required)_: Data structure that will be mapped as message to
  device out

#### Outputs

The message sent to device.

## HTTP request

> This node sends an http request to a given address, and, then, it can forward the response to the next node in the flow.

.. \_http_node:
.. image:: images/nodes/http-request-node.png
:width: 20%
:align: left
:alt: http_node

#### Image

.. \_http_in_node:
.. figure:: images/nodes/http_node_cfg.png
:width: 50%
:align: center
:alt: httpin_node

    : Http Request configuration

#### Inputs

- **Method** _(required)_: HTTP method of the request. Must be one of GET, PUT, POST, PATCH or DELETE.
- **URL** _(required)_: The URL that will receive the http request
- **Request body** _(required)_: Variable that contains the request body. This
  value can be assigned to the variable using the **template node**, for
  example.
- **Response** _(required)_: Variable that will receive the http response.
- **Return** _(required)_: Type of the return.
- **Name** _(optional)_: Name of the node.

#### Outputs

    The HTTP response.

## Ftp request

> This node sends a file to a FTP server.

.. \_ftp-request:
.. image:: images/nodes/ftp-request.png
:width: 20%
:align: left
:alt: http_node

When uploading a file, its name can be set by the "Filename" field in the same way as other output variables (it should refer to a variable set in the flow).
The file encoding can also be set to, for example, "base64" or "utf-8".

#### Image

.. \_ftp-request-panel:
.. figure:: images/nodes/ftp-request-panel.png
:width: 50%
:align: center
:alt: httpin_node

    : Device template in configuration window

#### Inputs

- **Method** _(required)_: The FTP action to be taken (PUT).
- **URL** _(required)_: The target FTP server
- **Authentication** _(required)_: Username and password to access this server.
- **File name** _(required)_: Variable containing the file name to be uploaded.
- **File content** _(required)_: This variable should hold the file content.
- **File encoding** _(required)_: How the file is encoded
- **Response** _(optinal)_: Variable that will receive the FTP response
- **Name** _(optional)_: Name of the node.

#### Outputs

A file in the specified FTP server.

## Notification

> This node sends a user notification to other services in dojot.

.. \_notification-request:
.. image:: images/nodes/notification.png
:width: 20%
:align: left
:alt: http_node

This might be useful to generate application notifications that could be consumed by a front-end application. The user can set a static message to be sent or, as other output nodes, configure a variable set in a previous node which will be resolved at runtime.
Also, metadata can be added to the message: it can be a simple key-value object containing arbitrary data.

#### Images

.. \_notification-panel:
.. figure:: images/nodes/notification-panel.png
:width: 50%
:align: center
:alt: httpin_node

    : Device template in configuration window

#### Inputs

- **Name** _(optional)_: Name of the node
- **Message** _(required)_: Static, if the notification should contain a static
  text, or dynamic, which will enable a variable to be set as output to this
  node. This variable will be substituted in runtime.
- **Value** _(required)_: message content (either static text or a variable
  reference).
- **Metadata** _(required)_: variable reference containing a simple dictionary
  (key-value pairs) containing the metadata to be added to the message

#### Outputs

The message will be sent to Dojot notification schema.

## Change

> Change node is used to copy or assign values to an output, i. e., copy values of a message attributes to a dictionary that will be assigned to virtual device.

.. \_change_node:
.. image:: images/nodes/change_node.png
:width: 20%
:align: left
:alt: change_node

#### Figure

.. \_change_node_cfg:
.. figure:: images/nodes/change_node_cfg.png
:width: 50%
:align: center
:alt: change_node_cfg

    : Change configuration

#### Inputs

- **Name** _(optional)_: Name of the node
- **msg** _(required)_: Definition of the data structure that will be sent to
  the next node and will receive the value set on the _to_ field
- **to** _(required)_: Assignment or copy of values

.. note::
More than one rule can be assign by clicking on _+add_ below the rules box.

## Switch

> A node to route messages based on property values.

.. \_switch_node:
.. image:: images/nodes/switch_node.png
:width: 20%
:align: left
:alt: switch_node

When a message arrives, the selected property is evaluated against each of the defined rules. The otherwise rule applies as a "not any of" the rules preceding it.

More than one rule can be assign by clicking on _+add_ below the rules box.

The rules are mapped one-to-one to the output conectors. Then the first rule is related to the first output, the second rule to the second output and so on.

#### Image

.. \_switch_node_cfg:
.. figure:: images/nodes/switch_node_cfg.png
:width: 50%
:align: center
:alt: switch_node_cfg

    : Switch configuration

#### Inputs

- **Name** _(optional)_: Name of the node
- **Property** _(required)_: Variable that will be evaluated
- **Rule box** _(required)_: Rules that will determine the output branch of the
  node. Also, it can be configured to stop checking rules when it finds one
  that matches other or check all the rules and route the message to the
  corresponding output.

#### Outputs

The message is then sent to the output of all rules that pass.

## Template

> Sets a property based on the provided template.

.. note::
Despite its name, this node is not related to Dojot's templates.

.. \_template_node:
.. image:: images/nodes/template_node.png
:width: 20%
:align: left
:alt: template_node

This node will assign a value to a target variable. This value can be a constant, the value of an attribute that came from the entry device.

By default this uses the mustache format, but this can be switched off if required.

For example, when a template of:

```
Hello {{payload.name}}. Today is {{date}}
```

receives a message containing:

```
{
  date: "Monday"
  payload: {
    name: "Fred",
  }
}
```

The resulting property will be:

```
Hello Fred. Today is Monday
```

.. note::
By default, mustache will escape any HTML entities in the values it substitutes. To prevent this, use {{{triple}}} braces

#### Image

.. \_template_node_cfg:
.. figure:: images/nodes/template_node_cfg.png
:width: 50%
:align: center
:alt: template_node_cfg

    : Template configuration

#### Inputs

- **Name** _(optional)_: Name of the node
- **Set Property** _(required)_: Variable that will receive the value
- **Format** _(required)_: Format template will be writen
- **Template** _(required)_: A msg object containing information to populate the template.
  Value that will be assigned to the target variable
  set on **Set property**
- **Output as** _(required)_: The format of the output

#### Outputs

- **msg** _(object)_: a msg with a property set by populating the configured template with properties from the incoming msg.

## Cron

> A node used to create/remove cron jobs.

.. \_cron_node:
.. image:: images/nodes/cron-node.png
:width: 20%
:align: left
:alt: cron_node

Cron allows creating schedule tasks to:

- send events to the data broker or
- execute a http request.

#### Figure

.. \_cron_node_cfg:
.. figure:: images/nodes/cron-node-config.png
:width: 50%
:align: center
:alt: cron_node_cfg

    : Cron configuration

#### Inputs

- **Operation** _(required)_: Defines the type of processing if creating or removing cron jobs (CREATE, REMOVE).
- **CRON Time Expression** _(required)_: CRON Time Expression, eg. `* * * * * *`. Required when using CREATE type operation.
- **JOB Name** _(optional)_: Name of Job.
- **JOB Description** _(optional)_: Description of Job.
- **JOB Type** _(required)_: Options are EVENT REQUEST or HTTP REQUEST.
- **JOB Action** _(required)_: Variable that contains the JSON to JOB Action. This value can be assigned to the variable using the template node, for example.
- **JOB Identifier (output to)** _(required)_: Variable that will receive the JOB Identifier.
- **Name** _(optional)_: Name of the node

Example of `JOB Action` when `JOB Type` is **HTTP REQUEST**:

.. code-block:: json

    {
        "method": "PUT",
        "headers": {
                      "Authorization": "Bearer ${JWT}",
                      "Content-Type": "application/json"
                    },
        "url": "http://device-manager:5000/device/${DEVICE_ID}/actuate",
        "body": {
                    "attrs": {"message": "keepalive"}
                }
    }

Example of `JOB Action` when `JOB Type` is **EVENT REQUEST**:

.. code-block:: json

    {
        "subject": "dojot.device-manager.device",
        "message": {
                      "event": "configure",
                      "data": { "attrs": { "message": "keepalive"},
                                "id": "6a1213"
                               },
                      "meta": { "service": "admin"}
                    }
    }

## Cron batch

> Similar as `cron node`, but allows using a batch of schedules instead of only one.

.. \_cron_batch_node:
.. image:: images/nodes/cron-batch-node.png
:width: 20%
:align: left
:alt: cron_batch_node

#### Figure

.. \_cron_batch_node_cfg:
.. figure:: images/nodes/cron-batch-node-config.png
:width: 50%
:align: center
:alt: cron_batch_node_cfg

    : Cron batch configuration

#### Inputs

- **Operation** _(required)_: Defines the types of processings if creating or removing cron jobs (CREATE, REMOVE).
- **JOB requests** _(required)_: Variable that contains the array of JSONs to JOB Actions.
- **JOB identifiers** _(required)_: Variable that will receive the array of job identifiers.
- **Name** _(optional)_: Name of the node

## Geofence

> A simple geofence filter node. Select an interest area to determine which devices will activate the flow.

.. \_geofence_node:
.. image:: images/nodes/geofence_node.png
:width: 20%
:align: left
:alt: geofence_node

It supports polygons only, and will filter all messages that either fall inside, outside the region or when the device enters or exits the region, depending on the selected mode.

If the node is given a name property then msg.location.isat will be an array containing a list of named areas that the point is inside of and msg.location.distance will contain an array of name, distance pairs. Where distance is the dinstance in metres to from the point to the centroid of the region.

This node requires inputs with msg.location.lat & msg.location.lon or msg.lat & msg.lon values.

.. \_geofence_node_cfg:
.. figure:: images/nodes/geofence_node_cfg.png
:width: 50%
:align: center
:alt: geofence_node_cfg

    : Geofence configuration

#### Inputs

- **Geo Coordinate** _(required)_: Area that will be selected. It can be chosen with an
  square or with a pentagon.
- **Filter** _(required)_: Which side of the area will be picked: inside or
  outside the marked area in the field above.
- **Name** _(optional)_: Name of the node

## Get Context

> This node is used to get a variable that is in the context and assign its value to a variable that will be used in the flow.

.. \_getcontext_node:
.. image:: images/nodes/getcontext_node.png
:width: 20%
:align: left
:alt: getcontext_node

Context is a mechanism that allows a given set of data to persist
beyond the life of the event, thus making it possible to store a state for the elements of the solution.

#### Image

.. \_getcontext_node_cfg:
.. figure:: images/nodes/getcontext_node_cfg.png
:width: 50%
:align: center
:alt: getcontext_node_cfg

#### Inputs

- **Name** \*(optional)\*\*: Name of the node
- **Context layer** \*(required)\*\*: The layer of the context that que variable
  is at
- **Context name** \*(required)\*\*: The variable that is in the context
- **Context content** \*(required)\*\*: The variable in the flow that will receive
  the value of the context

## Merge data

> This node allows objects to be merged in the **flow** context.

.. \_merge_data_node:
.. image:: images/nodes/merge-data-node.png.png
:width: 20%
:align: left
:alt: merge_data_node

#### Image

.. \_merge_data_node_cfg:
.. figure:: images/nodes/merge-data-node-config.png
:width: 50%
:align: center
:alt: merge_data_node_cfg

    : Merge data configuration

#### Inputs

- **Target data (JSON)** _(required)_: Variable that contains the data to be merged.
- **Merged data (JSON)** _(required)_: Variable that will receive the new data merged with your existing data.
- **Name** _(optional)_: Name of the node

## Cumulative sum

> The cumulative sum node accumulates the data for an attribute in a temporal window and keeping this in the **flow** context.

.. \_cumulative_sum_node:
.. image:: images/nodes/cumulative-sun-node.png
:width: 20%
:align: left
:alt: cumulative_sum_node

#### Image

.. \_cumulative_sum_node_cfg:
.. figure:: images/nodes/cum-sum-node-config.png
:width: 50%
:align: center
:alt: cumulative_sum_node_cfg

    : Cumulative sum configuration

#### Inputs

- **Time period (min)** _(required)_: Time in minutes to keep the sum.
- **Target attribute** _(required)_: Variable that contains the value to be sum.
- **Timestamp** _(required)_: Variable containing the timestamp from the device or dojot. Most of the time it can be set with `payload.metadata.timestamp`.
- **Sum** _(required)_: Variable that will receive the sum.
- **Name** _(optional)_: Name of the node

#### Outputs

    The flow does not receive any new data from this node.

## Publish in FTP topic

> Node to forward messages to Apache Kafka FTP topic.

.. \_kafka2ftp_node:
.. image:: images/nodes/kafka2ftp_node.png
:width: 20%
:align: left
:alt: kafka2ftp_node

It publishes to the `tenant.dojot.ftp` topic (_tenant_ is defined by which tenant the flow belongs to)
in which the messages are produced with informations about the file name,
encoding format and file content.

#### Image

.. \_kafka2ftp_node_cfg:
.. figure:: images/nodes/kafka2ftp_node_cfg.png
:width: 50%
:align: center
:alt: kafka2ftp_node_cfg

    : *Publish in FTP topic* configuration

#### Inputs

- **Encoding** _(required)_: The encoding that the file to be sent uses. Valid values are: ascii, base64, hex, utf16le, utf8 and binary.
- **Filename** _(required)_: Variable with the name of the file to be sent.
- **Content** _(required)_: Variable with the file contents to be sent.
- **Name** _(optional)_: Name of the node

#### Outputs

Example of a message sent by this node:

```json
{
  "metadata": {
    "msgId": "33846252-659f-42cc-8831-e2ccb923a702",
    "ts": 1571858674,
    "service": "flowbroker",
    "contentType": "application/vnd.dojot.ftp+json"
  },
  "data": {
    "filename": "filename.jpg",
    "encoding": "base64",
    "content": "..."
  }
}
```

Where the keys above are:

- msgId: Value of type uuidv4 used to uniquely identify the message in dojot's context.
- ts: Timestamp in Unix Timestamp (ms) format from the moment the message was produced.
- service: Name of the service that generated the message.
- contentType: Type of encoding used by the file.
- filename: Name of the file to be sent to the FTP server.
- encoding: Encoding the contents of the file. Valid values are: ascii, base64, hex, utf16le, utf8 and binary.
- content: File contents.

This can be used with the kafka2ftp component. See more in :doc:`components-and-apis`.

Deprecated nodes

---

These nodes are scheduled to be removed in future versions. They will work
with no problems with current flows.

Device in
+++++++++

.. \_device_in_node:
.. image:: images/nodes/device_node.png
:width: 20%
:align: center
:alt: device_node

This node determine an especific device to be the entry-point of a flow. To
configure the device in node, a window like :numref:`device_in_cfg` will be
displayed.

.. \_device_in_cfg:
.. figure:: images/nodes/device_node_cfg.png
:width: 50%
:align: center
:alt: devicein_node_cfg

    : Device in configuration window

#### Inputs

- **Name** _(optional)_: Name of the node
- **Device** _(required)_: The _dojot_ device that will trigger the flow
- **Status** _(required)_: _exclude device status changes_ will not use device
  status changes (online, offline) to trigger the flow. On the other hand,
  _include devices status changes_ will use these status to trigger the flow.

.. note::
If the the device that triggers a flow is removed, the flow becomes invalid.

Device template in
++++++++++++++++++

.. \_devicetemplate_in_node:
.. image:: images/nodes/devicetemplate_node.png
:width: 20%
:align: left
:alt: devicetemplatein_node

This node will make that a flow get triggered by devices that are composed by a
certain template. If the device template that is configured in **device
template in** node is template A, all devices that are composed with template A
will trigger the flow. For example: _device1_ is composed by templates [A,B],
_device2_ by template A and _device3_ by template B. Then, in that scenario,
only messages from _device1_ and _device2_ will initiate the flow, because
template A is one of the templates that compose those devices.

.. \_devicetemplate_node_cfg:
.. figure:: images/nodes/devicetemplate_node_cfg.png
:width: 50%
:align: center
:alt: devicetemplatein_node

    : Device template in configuration window

#### Inputs

- **Name** _(optional)_: Name of the node.
- **Device** _(required)_: The _dojot_ device that will trigger the flow.
- **Status** _(required)_: Choose if devices status changes will trigger or not
  the flow.

Device out
++++++++++

.. \_deviceout_node:
.. image:: images/nodes/deviceout_node.png
:width: 20%
:align: left
:alt: deviceout_node

Device out will determine which device will have its attributes updated on
_dojot_ according to the result of the flow. Bear in mind that this node
doesn't send messages to your device, it will only update the attributes on the
platform. Normally, the chosen device out is a _virtual device_, which is a
device that exists only on _dojot_.

.. \_deviceout_node_cfg:
.. figure:: images/nodes/deviceout_node_cfg.png
:width: 50%
:align: center
:alt: deviceout_node_cfg

    : Device out config window

#### Inputs

- **Name** _(optional)_: Name of the node.
- **Device** _(required)_: Select "The device that triggered the flow" will
  make the device that was the entry-point be the end-point of the flow.
  "Specific device" any chosen device wil be the output of the flow and "a
  device defined during the flow" will make a device that the flow selected
  during the execution the endpoint.
- **Source** _(required)_: Data structure that will be mapped as message to
  device out

Actuate

---

Actuate node allows send messages to a real device, like telling a lamp to turn the light off and
etc.

.. \_actuate_node:
.. image:: images/nodes/actuate_node.png
:width: 20%
:align: left
:alt: actuate_node

#### Image

.. \_actuate_node_cfg:
.. figure:: images/nodes/actuate_node_cfg.png
:width: 50%
:align: center
:alt: actuate_node_cfg

    : Actuate configuration

#### Inputs

- **Name** _(optional)_: Name of the node.
- **Device** _(required)_: A real device on dojot
- **Source** _(required)_: Data structure that will be mapped as message to
  device out

## Learn by examples

.. contents::
:local:

Using http node

---

Imagine this scenario: a device sends an _username_ and a _password_, and from
these attrs, the flow will request to a server an authentication token that
will be sent to a virtual device that has a _token_ attribute.

.. \_using_http_node_flow:
.. figure:: images/nodes/using_http_node_flow.png
:width: 120%
:align: center
:alt: using_http_node_flow

    : Flow used to explain http node

To send that request to the server, the http method should be a POST and the
parameters should be within the requisition. So, in the template node, a JSON
object will be assigned to a variable. The body (parameters _username_ and
_password_) of the requisition will be assigned to the **payload** key of the
JSON object. And, if needed, this object can have a _headers_ key as well.

.. \_using_http_node_template:
.. figure:: images/nodes/using_http_node_template.png
:width: 80%
:align: center
:alt: using_http_node_template

    : Template node configuration

Then, on the http node, the Requisition field will receive the value of the
object created at the template node. And, the response will be assigned to any
variable, in this case, this is _msg.res_ .

.. note::
If UTF-8 String buffer is chosen in the return field, the body of the
response body will be a string. If JSON object is chosen, the body will be
an object.

.. \_using_http_node_http:
.. figure:: images/nodes/using_http_node_http.png
:width: 80%
:align: center
:alt: using_http_node_http

    : Template node configuration

As seen, the response of the server is _req.res_ and the response body can be
accessed on **msg.res.payload**. So, the keys of the object that came on the
responsy can be accessed by: **msg.res.payload.key**. On figure
:numref:`using_http_node_change` the token that came in the response is
assigned to the attribute token of the virtual device.

.. \_using_http_node_change:
.. figure:: images/nodes/using_http_node_change.png
:width: 80%
:align: center
:alt: using_http_node_change

    : Template node configuration

.. \_using_http_node_deviceout:
.. figure:: images/nodes/using_http_node_deviceout.png
:width: 80%
:align: center
:alt: using_http_node_deviceout

    : Device out configuration

Then, the result of the flow is the attribute _token_ of the virtual device be
updated with the token that came in the response of the http request:

.. \_using_http_node_result:
.. figure:: images/nodes/using_http_node_result.png
:width: 80%
:align: center
:alt: using_http_node_result

    : Device updated

Using geofence node

---

A good example to learn how geofence node works ia studying the flow below:

.. \_using_geofence_node_flow:
.. figure:: images/nodes/using_geofence_node_flow.png
:width: 80%
:align: center
:alt: using_geofence_node_flow

    : Flow using geofence

The geofence node named _in area_ is set like seem in
:numref:`using_geofence_node_geofence`. The only thing that diffs the geofence
nodes _in area_ from _out of the area_ is the field **Filter** that, in the
first, is configured to _only points inside_ and _only points outside_ in the
second, respectively.

.. \_using_geofence_node_geofence:
.. figure:: images/nodes/using_geofence_node_geofence.png
:width: 80%
:align: center
:alt: using_geofence_node_geofence

    : Geofence node configuration

Then, if the device that is set as _device in_ sends a messagem with a geo
attribute the geofence node will evaluate the geo point acoording to its rule
and if it matches the rule, the node forward the information to the next node
and, if not, the execution of the branch, which has the geofence that the rule
didn't match, stops.

.. note::
To geofence node work, the messege received **should** have a geo attribute, if not, the branches of the flow will stop
at the geofence nodes.

Back to the example, if the car sends a message that he is in the marked area,
like `{ "position": "-22.820156,-47.2682535" }`, the message received in
device out will be "Car is inside the marked area", and, if it sends
`{"position": "0,0"}` device out will receive "Car is out of the marked area"

.. \_using_geofence_node_template:
.. figure:: images/nodes/using_geofence_node_template.png
:width: 50%
:align: center
:alt: using_geofence_node_template

    : Template node configuration if the car is in the marked area

.. \_using_geofence_node_result:
.. figure:: images/nodes/using_geofence_node_result.png
:width: 80%
:align: center
:alt: using_geofence_node_result

    : Output in device out

Using cumulative sum, switch and notification node

---

Imagine this scenario: a device sends the level of rain, we want to generate a notification if the accumulated, sum, of the rains in the last hour is greater than 100.

.. \_using_cum_sum_noti_flow:
.. figure:: images/nodes/using_cum_sum_noti_flow.png
:width: 80%
:align: center
:alt: using_cum_sum_noti_flow

    : Flow using cumulative sum, switch and notification

In the `cumulative sum` node, we will accumulate the value of rain (_Target attribute_) in the
60 minute time window (_Time period_) and we will set this sum in a new attribute
called `payload.data. attrs.rain60Min` (_Sum_). The _Timestamp_ setting refers to the
timestamp from the device or dojot, most of the time it can be set with
`payload.metadata.timestamp`. See more in :numref:`using_cum_sum_node_cumulative` .

.. \_using_cum_sum_node_cumulative:
.. figure:: images/nodes/using_cum_sum_node_cumulative.png
:width: 80%
:align: center
:alt: using_cum_sum_node_cumulative

    : Cumulative sum node configuration

We want the notification to be triggered only if the accumulated rain value is greater than 100, for that we will use the switch node. As in image :numref:`using_cum_sum_node_switch`.

.. \_using_cum_sum_node_switch:
.. figure:: images/nodes/using_cum_sum_node_switch.png
:width: 80%
:align: center
:alt: using_cum_sum_node_switch

    : Switch node configuration

Now, if our value is greater than 100 we need to generate the notification,
for that we will use an auxiliary node before, the _template_ node.
In the template node we will create the message that will appear in the notification
and define its metadata, :numref:`using_cum_sum_node_template`.

.. \_using_cum_sum_node_template:
.. figure:: images/nodes/using_cum_sum_node_template.png
:width: 80%
:align: center
:alt: using_cum_sum_node_template

    : Template node configuration

Finally, we will configure the notification node, as in image :numref:`using_cum_sum_node_noti`.

.. \_using_cum_sum_node_noti:
.. figure:: images/nodes/using_cum_sum_node_noti.png
:width: 80%
:align: center
:alt: using_cum_sum_node_noti

    : Notification node configuration

So, if the weather station (device set in the event device
node with publication checked)
sends several messages like `{" rain ": 5}`
during the last hour and one of these times the sum exceeds 100,
the notification will be generated.

.. note::
Multiple notifications can be generated, as long as the accumulated value is greater than 100.
See image :numref:`using_cum_sum_result`.

.. \_using_cum_sum_result:
.. figure:: images/nodes/using_cum_sum_result.png
:width: 80%
:align: center
:alt: using_cum_sum_result

    : Notification

.. \_mustache: https://mustache.github.io/mustache.5.html
