# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, CPqD
# This file is distributed under the same license as the dojot package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: dojot 0.4.3\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-09 17:25-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/mosca-tls.rst:2
msgid "Using MQTT with security (TLS)"
msgstr ""

#: ../../source/mosca-tls.rst:5
msgid "Audience: users"
msgstr ""

#: ../../source/mosca-tls.rst:6
msgid "Level: intermediate"
msgstr ""

#: ../../source/mosca-tls.rst:7
msgid "Reading time: 15 m"
msgstr ""

#: ../../source/mosca-tls.rst:10
msgid ""
"This document describes how to configure dojot to use MQTT over TLS when "
"using the microservice `IotAgent-Mosca`_"
msgstr ""

#: ../../source/mosca-tls.rst:14
msgid "Table of Contents"
msgstr ""

#: ../../source/mosca-tls.rst:16
msgid "For a device to connect using TLS with Mosca, it must possess:"
msgstr ""

#: ../../source/mosca-tls.rst:18
msgid "A key pair (.key file);"
msgstr ""

#: ../../source/mosca-tls.rst:19
msgid ""
"A certificate signed by a Certificate Authority (CA) trusted by Mosca "
"(.crt file);"
msgstr ""

#: ../../source/mosca-tls.rst:21
msgid "The certificate of this CA (.crt file);"
msgstr ""

#: ../../source/mosca-tls.rst:23
msgid ""
"When a device is created, DeviceManager will automatically notify the "
"following components:"
msgstr ""

#: ../../source/mosca-tls.rst:26
msgid ""
"IoTAgent-Mosca: will register the new device on its internal cache and "
"will create an entry, allowing the device to publish on a specific topic."
msgstr ""

#: ../../source/mosca-tls.rst:27
msgid ""
"EJBCA: will create an end entity so a certificate can be created on the "
"future."
msgstr ""

#: ../../source/mosca-tls.rst:31
msgid "Components"
msgstr ""

#: ../../source/mosca-tls.rst:34
msgid "EJBCA-REST"
msgstr ""

#: ../../source/mosca-tls.rst:36
msgid ""
"`EJBCA`_ is a complete Private Key Infrastructure (PKI) capable to manage"
" CAs, cryptography keys and certificates. EJBCA provides a SOAP, web and "
"a command line interface. EJBCA-REST is an wrapper on top of EJBCA that "
"provides modern interfaces, like REST and Kafka."
msgstr ""

#: ../../source/mosca-tls.rst:41
msgid ""
"EJBCA provides SOAP, web and command line interfaces. `EJBCA-Rest`_ is a "
"wrapper on top of EJBCA that complements those, allowing the CA to be "
"configured using REST. When used within dojot, it also listens to Kafka "
"events, allowing its automatic configuration."
msgstr ""

#: ../../source/mosca-tls.rst:47
msgid "What is a certificate?"
msgstr ""

#: ../../source/mosca-tls.rst:49
msgid ""
"A certificate contains the public key for an entity (a user, device, "
"website), along with information about this entity, about the CA which "
"signs the certificate, the allowed certificate usage and a checksum. When"
" a entity wants a certificate to be signed, the entity should create a "
"CSR file and send it to the desired CA. The CSR file is an 'intention of "
"certification'. The file contains the information required from the "
"entity and some information about the certificate use, hostnames and IPs "
"where the certificate will reside, alternative names for the entity, etc."
" EJBCA can decide, using its configured policies, what information to "
"keep, to discard and to overwrite of the received CSR. EJBCA can refuse "
"to sign a CSR if it concludes that it is not safe enough according to its"
" policies."
msgstr ""

#: ../../source/mosca-tls.rst:61
msgid ""
"These configurable policies are called 'Certificate Profiles'. One "
"Certificate profile named CFREE, specialized for MQTT TLS, is provided "
"out of the box."
msgstr ""

#: ../../source/mosca-tls.rst:64
msgid "In short, CFREE have the following configurations (and many more):"
msgstr ""

#: ../../source/mosca-tls.rst:66
msgid "Cryptography keys must have between 2048 and 8192 bits;"
msgstr ""

#: ../../source/mosca-tls.rst:67
msgid "Entities can define hostnames and IPs;"
msgstr ""

#: ../../source/mosca-tls.rst:68
msgid "Key usage is marked as not critical (for now);"
msgstr ""

#: ../../source/mosca-tls.rst:69
msgid "The hash algorithm is SHA256. The sign algorithm is RSA."
msgstr ""

#: ../../source/mosca-tls.rst:73
msgid "So, how does EJBCA work in dojot?"
msgstr ""

#: ../../source/mosca-tls.rst:75
msgid ""
"When creating a new device, an associated end entity is created in EJBCA."
" Its name will be the device's ID (like 'f60c28') and its password will "
"be always 'dojot'."
msgstr ""

#: ../../source/mosca-tls.rst:79
msgid ""
"A certificate can be signed by sending a HTTP POST request to "
"host:8000/sign/<cname>/pkcs10. CName is the end entity's name (or "
"device). The payload sent with this request should be a JSON containing "
"the end entity password and a CSR file (certificate intention) in base64 "
"format."
msgstr ""

#: ../../source/mosca-tls.rst:84
msgid ""
"Note that the URL is routed by the API gateway. As in other APIs in "
"dojot, a JWT is needed. You can find how to generate and how to use such "
"token in :doc:`using-api-interface`."
msgstr ""

#: ../../source/mosca-tls.rst:87
msgid ""
"In order to create the CSR file and ask for a certificate signature, a "
"user can use a helper script called 'Certificate Retriever', which is "
"detailed in `Certificate retriever`_ section."
msgstr ""

#: ../../source/mosca-tls.rst:92
msgid "Mosca"
msgstr ""

#: ../../source/mosca-tls.rst:93
msgid ""
"Mosca is a node.js mqtt broker. To using Mosca you need do some "
"configurations by environment variable:"
msgstr ""

#: ../../source/mosca-tls.rst:95
msgid ""
"MOSCA_TLS_DNS_LIST: TLS DNS list, Servers hostnames, the host to connect "
"external (separated by a comma). Example: localhost, mydomain.com"
msgstr ""

#: ../../source/mosca-tls.rst:97
msgid ""
"All the certificates will be created automatically, not needing to "
"configure manually the certificates into the broker."
msgstr ""

#: ../../source/mosca-tls.rst:100
msgid ""
"Note: To use Mosca without TLS too, you need set the environment variable"
" ALLOW_UNSECURED_MODE to 'true' and to use 1883 port. **It is not "
"recommended!**"
msgstr ""

#: ../../source/mosca-tls.rst:103
msgid "Certificate retriever"
msgstr ""

#: ../../source/mosca-tls.rst:105
msgid ""
"This component is a helper script for device certificates creation. It is"
" available at `Certificate Retriever GitHub repository`_ and it coded "
"using Python 3."
msgstr ""

#: ../../source/mosca-tls.rst:109
msgid "A user can use it by executing:"
msgstr ""

#: ../../source/mosca-tls.rst:121
msgid "And to finally get the certificate for the device:"
msgstr ""

#: ../../source/mosca-tls.rst:127
msgid "The mandatory parameters are:"
msgstr ""

#: ../../source/mosca-tls.rst:129
msgid ""
"${DOJOT_HOST}: where dojot is (No / at the end). Example: "
"http://localhost:8000"
msgstr ""

#: ../../source/mosca-tls.rst:130
msgid "${DEVICE_ID}: device id that will get a new certificate. Example: f60c28"
msgstr ""

#: ../../source/mosca-tls.rst:132
msgid ""
"Note that authentication is performed in dojot. The script will ask for "
"user credentials and will invoke user authentication automatically. The "
"user needs permission for certificate signing to be able to use this "
"script."
msgstr ""

#: ../../source/mosca-tls.rst:136
msgid ""
"An end entity must exist in EJBCA in 'New' state before asking for a new "
"certificate signature. When a new device is created, an end entity is "
"automatically created in EJBCA by DeviceManager. This new end entity's "
"name is the device ID itself. Its password is 'dojot'."
msgstr ""

#: ../../source/mosca-tls.rst:141
msgid ""
"The script authenticates users with given username and password, "
"retrieves CA certificate, generates a key pair as well as a CSR file and "
"asks for certificate signature, in this order. Any error in any step will"
" halt its execution."
msgstr ""

#: ../../source/mosca-tls.rst:146
msgid ""
"After successfully executed, all certificates can be found in './certs' "
"folder."
msgstr ""

#: ../../source/mosca-tls.rst:150
msgid "Simulating a device with mosquitto"
msgstr ""

#: ../../source/mosca-tls.rst:152
msgid ""
"To publish and subscribe using the appropriated certificates, you must "
"need to be with the Mosca Broker and the EJBCA running. After creating "
"the dojot environment, the templates and the devices, use the mosquitto "
"emulate a device and to publish and subscribe in the desired topics:"
msgstr ""

#: ../../source/mosca-tls.rst:158
msgid ""
"Before install mosquitto_pub and mosquitto_sub (from package `mosquitto-"
"clients` on Debian-based Linux distributions) and access the folder "
"certs, if necessary:"
msgstr ""

#: ../../source/mosca-tls.rst:161
msgid ""
"Some Linux distributions, Debian-based Linux distributions in particular,"
" have two packages for `mosquitto`_ - one containing tools to access it "
"(i.e. mosquitto_pub and mosquitto_sub for publishing messages and "
"subscribing to topics) and another one containing the MQTT broker too. In"
" this tutorial, only the tools from package `mosquitto-clients` on "
"Debian-based Linux distributions are going to be used. Please check if "
"MQTT broker is not running before starting dojot (by running commands "
"like ``ps aux | grep mosquitto``) to avoid port conflicts."
msgstr ""

#: ../../source/mosca-tls.rst:173
msgid "How to publish:"
msgstr ""

#: ../../source/mosca-tls.rst:179
msgid "How to subscribe:"
msgstr ""

#: ../../source/mosca-tls.rst:186
msgid ""
"The <your .crt file>, <your .key file> and the cafile can be created with"
" the `Certificate Retriever GitHub repository`_ script. Where <tenant> is"
" a context identifier into dojot and <deviceId> is a identifier for the "
"device in the corresponding context."
msgstr ""

#: ../../source/mosca-tls.rst:189
msgid ""
"Note: In this case, the message is a publication with an attribute, this "
"attribute has the label `attr_example` and a new value 10, you need to "
"change this for your case."
msgstr ""

#: ../../source/mosca-tls.rst:193
msgid "Important Notes"
msgstr ""

#: ../../source/mosca-tls.rst:195
msgid ""
"These are a few but important notes related to device security and "
"associated subjects."
msgstr ""

#: ../../source/mosca-tls.rst:199
msgid "Debugging"
msgstr ""

#: ../../source/mosca-tls.rst:201
msgid ""
"TLS errors might be not so verbose as other problems. If an error "
"occurrs, the user might not know what went wrong because no component "
"indicates any problem. In this section there are some tips, frequent "
"problems and debugging tools to find out what's happening."
msgstr ""

#: ../../source/mosca-tls.rst:207
msgid "How to read a certificate"
msgstr ""

#: ../../source/mosca-tls.rst:209
msgid ""
"A certificate file can be in two formats: PEM (base64 text) or DER "
"(binary). OpenSSL offers tools to read such formats:"
msgstr ""

