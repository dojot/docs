# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, CPqD
# This file is distributed under the same license as the dojot package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
msgid ""
msgstr ""
"Project-Id-Version: dojot 0.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-04 15:58-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../source/security/crypto-service.rst:2
msgid "Crypto Service"
msgstr "Serviço Crypto"

#: ../../source/security/crypto-service.rst:4
msgid ""
"Crypto Service provides data encryption and decryption functions to other"
" *dojot* components. It is used only by internal services so they can "
"protect data communication (both internally and externally) and data "
"storage."
msgstr ""
"O serviço Crypto provê funções criptográficas de cifra e decifra de dados"
" para os demais componentes da plataforma dojot. Ele é usado somente "
"pelos serviços internos e, Ccom isso, os componenteseles internos podem "
"proteger os dados que serão trafegados internamente/externamente ou os "
"dados que serão armazenados, por exemplo."

#: ../../source/security/crypto-service.rst:6
msgid ""
"Available as a Docker image, Crypto Service can be instantiated easily "
"and integrated in a short time. Encrypt and decrypt data functionalities "
"are accessed through REST APIs."
msgstr ""
"Disponível como imagem Docker, o serviço Crypto pode ser instanciado com "
"facilidade e incorporado em pouco tempo. As funcionalidades para "
"cifra/decifra de dados são disponibilizadas através de interface REST."

#: ../../source/security/crypto-service.rst:9
#: ../../source/security/mutual-authentication.rst:13
msgid "Table of Contents"
msgstr ""

#: ../../source/security/crypto-service.rst:12
msgid "REST APIs"
msgstr "Interface REST"

#: ../../source/security/crypto-service.rst:14
msgid "Encrypt and decrypt data APIs are described below."
msgstr "As APIs para cifrar decifrar dados são descritas abaixo"

#: ../../source/security/crypto-service.rst:16
#: ../../source/security/crypto-service.rst:118
msgid "**Decrypt**"
msgstr ""

#: ../../source/security/crypto-service.rst:18
msgid "POST /crypto/decrypt"
msgstr ""

#: ../../source/security/crypto-service.rst:20
#: ../../source/security/crypto-service.rst:61
msgid "Request"
msgstr ""

#: ../../source/security/crypto-service.rst:22
#: ../../source/security/crypto-service.rst:41
#: ../../source/security/crypto-service.rst:63
#: ../../source/security/crypto-service.rst:82
msgid "Headers"
msgstr ""

#: ../../source/security/crypto-service.rst:28
#: ../../source/security/crypto-service.rst:47
#: ../../source/security/crypto-service.rst:69
#: ../../source/security/crypto-service.rst:88
msgid "Body"
msgstr ""

#: ../../source/security/crypto-service.rst:39
#: ../../source/security/crypto-service.rst:80
msgid "Response  200"
msgstr ""

#: ../../source/security/crypto-service.rst:57
#: ../../source/security/crypto-service.rst:104
msgid "**Encrypt**"
msgstr ""

#: ../../source/security/crypto-service.rst:59
msgid "POST /crypto/encrypt"
msgstr ""

#: ../../source/security/crypto-service.rst:98
msgid "Usage Examples"
msgstr "Exemplos de Uso"

#: ../../source/security/crypto-service.rst:100
msgid ""
"In order to use cryptographic functions provided by Crypto Service, one "
"must access the available REST APIs through a HTTP request."
msgstr ""
"Para utilizar as funções criptográficas que o Crypto oferece, é "
"necessário acessar as interfaces REST através de uma chamada HTTP. "

#: ../../source/security/crypto-service.rst:102
msgid ""
"Examples of how those requests can be made are showed bellow using the "
"command line tool curl."
msgstr ""
"Abaixo são apresentados exemplos de como essas chamadas podem ser feitas "
"usando a ferramenta de linha de comando curl."

#: ../../source/security/mutual-authentication.rst:2
msgid "Mutual Authentication"
msgstr "Autenticação Mútua"

#: ../../source/security/mutual-authentication.rst:4
msgid ""
"A security role is to ensure that only legitimate users have access to "
"the resources and information they need to perform their duties. "
"Authentication is part of this access control, when validating entities "
"identity. At the same time, another security role is to ensure that an "
"entity accesses legitimate resources and information, thereby avoiding "
"situations such as sending information to fraudulent servers, for "
"example."
msgstr ""
"Um papel da segurança é de garantir que somente usuários legítimos tenham"
" o acesso aos recursos e informações necessárias para realizar suas "
"funções. A autenticação faz parte deste controle de acessos, ao validar a"
" identidade de entidades. Ao mesmo tempo, outro papel da segurança é "
"garantir que uma entidade acesse os recursos e informações legítimas, "
"evitando assim situações como o envio de informações a servidores "
"fraudulentos, por exemplo."

#: ../../source/security/mutual-authentication.rst:6
msgid ""
"Mutual authentication is the process in which two entities authenticate "
"each other. In a client-server communication, the client must prove its "
"identity to the server and the server must prove its identity to the "
"client. Thus, each entity can ensure that they are communicating with a "
"legitimate interlocutor."
msgstr ""
"Autenticação Mútua é o processo no qual duas entidades fazem a "
"autenticação uma da outra. Numa comunicação cliente-servidor, o cliente "
"deve provar sua identidade ao servidor e o servidor deve provar sua "
"identidade ao cliente. Dessa forma, cada entidade pode garantir que está "
"se comunicando com um interlocutor legítimo."

#: ../../source/security/mutual-authentication.rst:8
msgid ""
"Mutual authentication protects access to data the application accesses "
"from *dojot* and therefore protects access to data of that application’s "
"user. It is done by ensuring that only registered applications can access"
" platform data and functionality. In addition, it ensures that the "
"platform the application is accessing is legitimate, meaning that no "
"attacker can pass themselves by the platform and get user or application "
"data."
msgstr ""
"A autenticação mútua protege o acesso aos dados que a aplicação acessa na"
" *dojot* e, por consequência, protege o acesso ao dados dos usuários "
"dessa aplicação. Ela faz isso garantindo que somente as próprias "
"aplicações registradas possam acessar os dados e funcionalidades da "
"plataforma. Adicionalmente, ela assegura que a plataforma que a aplicação"
" esteja acessando é legítima, ou seja, que nenhum atacante possa se "
"passar pela plataforma e obter dados da aplicação e de seus usuários."

#: ../../source/security/mutual-authentication.rst:10
msgid ""
"*Dojot* offers a mutual authentication service through a Docker image. "
"This service runs inside the platform and can be accessed using its "
"interfaces."
msgstr ""
"A *dojot* oferece um serviço de autenticação mútua através de uma imagem "
"Docker. Esse serviço é executado na plataforma e pode ser acessado usando"
" as interfaces adequadas."

#: ../../source/security/mutual-authentication.rst:16
msgid "Using Mutual Authentication"
msgstr "Usando a Autenticação Mútua"

#: ../../source/security/mutual-authentication.rst:18
msgid ""
"Applications can access *dojot* functionality to interact with its "
"components and connected devices. For an application to ensure that it is"
" communicating with a legitimate platform (and vice versa), it must make "
"use of the mutual authentication functionality *dojot* provides. This is "
"a simple process and its use requires only three steps to follow:"
msgstr ""
"Aplicações podem acessar as funcionalidades da *dojot* para interagir com"
" seus componentes e com os dispositivos conectados. Para que uma "
"aplicação possa garantir que está se comunicando com uma plataforma "
"legítima (e vice-versa), ela deve fazer o uso da funcionalidade de "
"autenticação mútua que a *dojot* fornece. Esse é um processo simples e "
"seu uso requer apenas 3 passos a serem seguidos:"

#: ../../source/security/mutual-authentication.rst:20
msgid ""
"Application Registration. When an application is registered in *dojot*, "
"it receives an identifier and a key that must be kept secret. This key is"
" used to authenticate the application on the platform."
msgstr ""
"Registro da aplicação. Quando uma aplicação é registrada na *dojot*, ela "
"recebe um identificador e uma chave que deve ser mantida em segredo. Essa"
" chave é usada para autenticar a aplicação na plataforma."

#: ../../source/security/mutual-authentication.rst:22
msgid ""
"Authentication. At the beginning of the communication between application"
" and *dojot*, the application initiates a handshake in which the two "
"entities will exchange information to ensure they are legitimate."
msgstr ""
"Autenticação. No início da comunicação entre a aplicação e a *dojot*, a "
"aplicação inicia um processo de handshake no qual as duas entidades irão "
"trocar informações de forma a garantir que são legítimas."

#: ../../source/security/mutual-authentication.rst:24
msgid ""
"Using the platform. When accessing *dojot* interfaces, the platform "
"informs a session identifier that is obtained at the time of "
"authentication. Thus, the platform can verify that the mutual "
"authentication process was performed by the application."
msgstr ""
"Uso da plataforma. Ao acessar as interfaces da *dojot*, a plataforma "
"informa o identificador da sessão que obteve no momento da autenticação. "
"Com isso, a plataforma pode verificar que a aplicação realizou o processo"
" de autenticação mútua"

#: ../../source/security/mutual-authentication.rst:27
msgid "Application Registration"
msgstr "Registro de aplicação"

#: ../../source/security/mutual-authentication.rst:29
msgid ""
"An application that is registered with *dojot* will receive an identifier"
" and a key that must be kept secret. The registration indicates that an "
"application will communicate and use platform features."
msgstr ""
"Uma aplicação que se registra na *dojot* irá receber um identificador e "
"uma chave que deve ser mantida em segredo. O registro indica que uma "
"aplicação irá se comunicar e utilizar funcionalidades da plataforma."

#: ../../source/security/mutual-authentication.rst:31
msgid ""
"Currently, the method used to register an application is the use of a "
"REST interface. After making the request for the registration, the "
"application will receive a unique identifier and a key. The API is "
"described below"
msgstr ""
"Atualmente, o método utilizado para fazer o registro de uma aplicação é o"
" uso de uma interface REST. Após fazer a requisição para o registro, a "
"aplicação receberá um identificador único e uma chave. A API é descrita "
"abaixo."

#: ../../source/security/mutual-authentication.rst:33
msgid "**REGISTER COMPONENT** - Register new application"
msgstr "**REGISTER COMPONENT** - Registro de nova aplicação"

#: ../../source/security/mutual-authentication.rst:50
msgid ""
"Received identifier and key will be used at the moment the application "
"authenticates with *dojot*. In order to do this, a client library is "
"provided to perform the authentication process (available in "
"github.com/dojot/ma-client-libs) and therefore, the library should have "
"knowledge about the values of the identifier and the key. The file "
"https://github.com/dojot/ma-client-libs/kerberos/src/protocol/unique.h is"
" used to store these values and will be used by the library at the moment"
" of authentication."
msgstr ""
"O identificador e a chave recebidos serão usados no momento da "
"autenticação com a *dojot*. Para isso, uma biblioteca cliente é fornecida"
" para realizar o processo de autenticação (disponível em github.com/dojot"
"/ma-client-libs) e, portanto, a biblioteca deverá ter conhecimento sobre "
"os valores do identificador e chave. O arquivo https://github.com/dojot"
"/ma-client-libs/kerberos/src/protocol/unique.h é utilizado para armazenar"
" esses valores e será usado pela biblioteca no momento da autenticação."

#: ../../source/security/mutual-authentication.rst:53
msgid "Authentication"
msgstr "Authenticação"

#: ../../source/security/mutual-authentication.rst:55
msgid ""
"When communicating with *dojot*, the application must perform mutual "
"authentication. This process is done through the library provided in "
"github.com/dojot/ma-client-libs. By using the library, three steps should"
" be followed:"
msgstr ""
"Ao se comunicar com a *dojot*, a aplicação deve realizar a autenticação "
"mútua. Esse processo é feito através da biblioteca fornecida em "
"github.com/dojot/ma-client-libs. Ao utilizar a biblioteca, 3 passos devem"
" ser seguidos:"

#: ../../source/security/mutual-authentication.rst:57
msgid "Initialize the library with server addresses"
msgstr "Inicializar a biblioteca com os endereços do servidor"

#: ../../source/security/mutual-authentication.rst:59
msgid "Register the callback function"
msgstr "Registrar a função de callback"

#: ../../source/security/mutual-authentication.rst:61
#: ../../source/security/mutual-authentication.rst:122
msgid "Call mutual authentication function"
msgstr "Chamar a função de autenticação mútua"

#: ../../source/security/mutual-authentication.rst:64
msgid "Library Initialization"
msgstr "Inicialização da Biblioteca"

#: ../../source/security/mutual-authentication.rst:66
msgid ""
"Initialization tells the library which URLs will be used to perform "
"mutual authentication. The function to be used is described below:"
msgstr ""
"A inicialização informa à biblioteca as URLs que serão usadas ao realizar"
" a autenticação mútua. A função a ser utilizada é descrita abaixo:"

#: ../../source/security/mutual-authentication.rst:68
msgid "**Initialize Kerberos**"
msgstr "Initialize Kerberos"

#: ../../source/security/mutual-authentication.rst:74
msgid "The arguments used in the function are described below."
msgstr "Os argumentos utilizados na função são descritos a seguir."

#: ../../source/security/mutual-authentication.rst:76
msgid "host - Platform main URL"
msgstr "host - URL principal da plataforma"

#: ../../source/security/mutual-authentication.rst:78
msgid "hostLength - Host string size"
msgstr "hostLength - Tamanho da string de host"

#: ../../source/security/mutual-authentication.rst:80
msgid "uriRequestAS - requestAS endpoint"
msgstr "uriRequestAS - Endpoint de acesso de requestAS"

#: ../../source/security/mutual-authentication.rst:82
msgid "requestASLength - requestAS string size"
msgstr "requestASLength - Tamanho da string de requestAS"

#: ../../source/security/mutual-authentication.rst:84
msgid "uriRequestAP - requestAP endpoint"
msgstr "uriRequestAP - Endpoint de acesso de requestAP"

#: ../../source/security/mutual-authentication.rst:86
msgid "requestAPLength - requestAP string Size"
msgstr "requestAPLength - Tamanho da string de requestAP"

#: ../../source/security/mutual-authentication.rst:88
msgid ""
"The following code snippet shows an example of how the function can be "
"used."
msgstr ""
"O trecho de código a seguir mostra um exemplo de como a função pode ser "
"utilizada."

#: ../../source/security/mutual-authentication.rst:99
msgid "Callback Registration"
msgstr "Registro de Callback"

#: ../../source/security/mutual-authentication.rst:101
msgid ""
"On the mutual authentication process, the library communicates with the "
"server and checks received data. If an error occurs during this process, "
"the library will call a callback function."
msgstr ""
"No processo de autenticação mútua, a biblioteca se comunica com o "
"servidor e verifica os dados recebidos. Se algum erro ocorrer durante "
"esse processo, a biblioteca vai chamar uma função de callback."

#: ../../source/security/mutual-authentication.rst:103
msgid ""
"This callback function is implemented by the library user and must be "
"registered before the authentication process. The callback function can "
"include code for error handling and logging, for example."
msgstr ""
"Essa função de callback é implementada pelo usuário da biblioteca e deve "
"ser registrada antes do processo de autenticação. A função de callback "
"pode conter código para tratamento de erro ou logs, por exemplo."

#: ../../source/security/mutual-authentication.rst:105
msgid "**Set Callback**"
msgstr "**Set Callback**"

#: ../../source/security/mutual-authentication.rst:111
msgid ""
"The following code shows an example of how the callback function can be "
"created and registered."
msgstr ""
"O código a seguir mostra um exemplo de como a função de callback pode ser"
" criada e registrada."

#: ../../source/security/mutual-authentication.rst:124
msgid ""
"After initializing the library with platform URL and registering the "
"callback function, the library is ready to perform the mutual "
"authentication process. The function that is used to perform the process "
"is shown below."
msgstr ""
"Depois de inicializar a biblioteca com os endereços da plataforma e "
"registrar a função de callback, a biblioteca está pronta para realizar o "
"processo de autenticação mútua. A função que é usada para realizar o "
"processo é mostrada abaixo."

#: ../../source/security/mutual-authentication.rst:130
msgid "The code below shows an example of how the function may be used."
msgstr "O código abaixo mostra um exemplo de como a função pode ser usada"

#: ../../source/security/mutual-authentication.rst:137
msgid "Accessing *dojot* APIs"
msgstr "Acessando as API da plataforma *dojot*"

#: ../../source/security/mutual-authentication.rst:139
msgid ""
"After the mutual authentication process completes, the application may "
"send additional data in the calls to the platform interfaces. This data "
"is the mutual authentication session identifier and is sent through an "
"HTTP header."
msgstr ""
"Após o processo de autenticação mútua ser concluído, a aplicação poderá "
"enviar um dado adicional nas chamadas às interfaces da plataforma. Esse "
"dado é o identificador de sessão de autenticação mútua e é enviado por "
"meio de um header HTTP."

#: ../../source/security/mutual-authentication.rst:141
msgid ""
"The following is an example of a call to a *dojot* API where mutual "
"authentication session identifier is also sent."
msgstr ""
"A seguir é apresentado um exemplo de uma chamada para uma API da *dojot* "
"onde o identificador de sessão da autenticação mútua também é enviado."

#~ msgid "Solution Description"
#~ msgstr "Descrição da Solução"

#~ msgid "Register callback"
#~ msgstr "Register callback"

#~ msgid "For a device to connect using TLS with Mosquitto, it must possess:"
#~ msgstr ""

#~ msgid ""
#~ "A certificate signed by a Certificate"
#~ " Authority (CA) trusted by Mosquitto "
#~ "(.crt file);"
#~ msgstr ""

#~ msgid ""
#~ "An entry on Mosquitto Access Control "
#~ "List (ACL), allowing the device to "
#~ "publish on a specific topic;"
#~ msgstr ""

#~ msgid "(optional) A Certificate Revocation List (CRL)."
#~ msgstr ""

#~ msgid "IoTAgent: will register the new device on its internal cache."
#~ msgstr ""

#~ msgid ""
#~ "MQTT-Manager: will create an entry "
#~ "on the ACL, allowing the device to"
#~ " publish on a specific topic."
#~ msgstr ""

#~ msgid ""
#~ "By default, dojot uses clear MQTT. "
#~ "To activate TLS, docker-compose.yml must"
#~ " be changed:"
#~ msgstr ""

#~ msgid ""
#~ "The image for service 'mqtt' must "
#~ "be changed from 'ansi/mosquitto' to "
#~ "'dojot/mqtt-manager';"
#~ msgstr ""

#~ msgid ""
#~ "The public port for 'mqtt' service "
#~ "must be changed from '1883:1883' to "
#~ "'8883:8883';"
#~ msgstr ""

#~ msgid ""
#~ "The MQTT\\_TLS variable of 'iotagent' "
#~ "service must be set to true "
#~ "(lowercase)."
#~ msgstr ""

#~ msgid "On the configuration file 'iotagent/config.json':"
#~ msgstr ""

#~ msgid "The flag 'secure' should be changed to true"
#~ msgstr ""

#~ msgid "MQTT Manager"
#~ msgstr ""

#~ msgid ""
#~ "MQTT-Manager is a helper service "
#~ "used to configure Mosquitto MQTT broker"
#~ " in a simple and 'on-the-fly'"
#~ " way. It can be configured using "
#~ "REST interfaces and Kakfa. Thus, HTTP"
#~ " requests or Kafka messages can be"
#~ " used to create and remove devices,"
#~ " as well as update CRL file "
#~ "(certification revocation list). This service"
#~ " is distributed as a docker container"
#~ " for easy deploy and its source "
#~ "code repository can be accessed in "
#~ "`MQTT Manager repository`_."
#~ msgstr ""

#~ msgid ""
#~ "Mosquitto by itself doesn't generate nor"
#~ " revoke certificates, it only relies "
#~ "on a CA and implements TLS "
#~ "protocol. The 'creation' of a particular"
#~ " device consists only in adding a "
#~ "new rule to ACL file in Mosquitto."
#~ " Such file looks like:"
#~ msgstr ""

#~ msgid ""
#~ "Each rule is composed by two "
#~ "lines: the first one specifies the "
#~ "user (device) and the second one "
#~ "defines which action (write or read) "
#~ "is allowed to which topic. In the"
#~ " example above, the user iotagent can"
#~ " read all topics (# is a "
#~ "wildcard). Also, the device with ID "
#~ "24f6 can write to topic "
#~ "/admin/24f6/attrs. The device ID is "
#~ "retrieved in 'Common name' certificate "
#~ "field."
#~ msgstr ""

#~ msgid ""
#~ "If a device sends data to a "
#~ "topic which it has no write "
#~ "permissions, then all data is discarded."
#~ " Mosquitto won't log any errors "
#~ "related to this."
#~ msgstr ""

#~ msgid ""
#~ "When the ACL is changes, Mosquitto "
#~ "must be restarted (or a SIGDUP "
#~ "signal can be sent to its "
#~ "process). MQTT-Manager does this "
#~ "automatically when creating or removing "
#~ "devices."
#~ msgstr ""

#~ msgid ""
#~ "A script is executed when firing "
#~ "the container up. This script will "
#~ "generate a pair of keys to "
#~ "Mosquitto, retrieves the certificate and "
#~ "CRL from a CA and asks it to"
#~ " sign its public key. ALl generated"
#~ " files are placed in "
#~ "/usr/local/src/mosquitto-1.4.13/certs (inside the "
#~ "container)."
#~ msgstr ""

#~ msgid ""
#~ "Mosquitto will only accept device "
#~ "connections that have certificate signed "
#~ "by its trusty CA."
#~ msgstr ""

#~ msgid ""
#~ "Also note that MQTT-Manager is "
#~ "used only in case when a TLS-"
#~ "enabled broker is needed. If this "
#~ "is not the case, then the vanilla"
#~ " `Mosquitto docker image`_ can be "
#~ "used."
#~ msgstr ""

#~ msgid "Mosquitto configuration files"
#~ msgstr ""

#~ msgid "Checkout this commented Mosquitto configuration file:"
#~ msgstr ""

#~ msgid ""
#~ "Note that for all configuration updates,"
#~ " it is mandatory to restart Mosquitto"
#~ " or to send a SIGDUP signal to"
#~ " its process."
#~ msgstr ""

#~ msgid "CRL (Certification Revocation List)"
#~ msgstr ""

#~ msgid ""
#~ "A CRL is a list which contains "
#~ "all revoked certificates. It is used "
#~ "to indicate which certificates are no"
#~ " longer valid (administratively set to "
#~ "invalid) as a normal certificate can "
#~ "be used for 1 to 5 years. "
#~ "This list is signed by CA and "
#~ "also has an expiration date - 1"
#~ " day by default. In TLS protocol, "
#~ "if CRL is expired then the "
#~ "recommended action to be taken is "
#~ "to refuse all incoming connections, as"
#~ " there is no way to check if"
#~ " the certificates used in those "
#~ "connections are invalid or not. This "
#~ "procedure is implemented in Mosquitto."
#~ msgstr ""

#~ msgid ""
#~ "Therefore, CA must generate a new "
#~ "list periodically. All components that "
#~ "use it must be updated."
#~ msgstr ""

#~ msgid "To read a CRL:"
#~ msgstr ""

#~ msgid "Errors in secure connection handshake between device and Mosquitto"
#~ msgstr ""

#~ msgid ""
#~ "If any errors occur during connection"
#~ " handshake, something like the following"
#~ " error might appear in Mosquitto's "
#~ "logs:"
#~ msgstr ""

#~ msgid ""
#~ "If this happens, try to establish "
#~ "connection using 'openssl client', as it"
#~ " is more verbose in error "
#~ "description."
#~ msgstr ""

#~ msgid "Common errors are shown by openssl\\_client (and \\_server as well):"
#~ msgstr ""

#~ msgid ""
#~ "SSL alert number 45: this error "
#~ "indicates that a certificate expired. "
#~ "Keep in mind that CRL also "
#~ "expires."
#~ msgstr ""

#~ msgid ""
#~ "SSL alert number 48: received a "
#~ "valid certificate chain or partial "
#~ "chain, but the certificate was not "
#~ "accepted because the CA certificate "
#~ "could not be located or could not"
#~ " be matched with a known, trusted "
#~ "CA. This message is always fatal."
#~ msgstr ""

#~ msgid ""
#~ "Alert unknown CA: check whether sent "
#~ "CA certificate is correct. If it "
#~ "is a sub-CA, check if all of"
#~ " its certificate chain was sent. This"
#~ " error also occurs if the CA "
#~ "certificate data (specially common name "
#~ "attribute) is the same as those "
#~ "from client certificate."
#~ msgstr ""

#~ msgid "Handshake is OK, but no published data reaches iotagent"
#~ msgstr ""

#~ msgid ""
#~ "You can check whether the device "
#~ "could connect to MQTT broker by "
#~ "checking Mosquitto's log:"
#~ msgstr ""

#~ msgid ""
#~ "If that line shows up, it means"
#~ " that the TLS handshake worked and"
#~ " the device successfully connected to "
#~ "Mosquitto. Check if the device has "
#~ "an ACL entry in Mosquitto to allow"
#~ " it to publish data in the "
#~ "specified topic. Keep in mind that "
#~ "if a device publishes something in "
#~ "another topic (which it has no "
#~ "permission to publish) all data is "
#~ "discarded by Mosquitto with no warnings."
#~ msgstr ""

#~ msgid "MQTT-TLS Tutorial"
#~ msgstr ""

#~ msgid "This document describes how to configure dojot to use MQTT over TLS."
#~ msgstr ""

#~ msgid "tl;dr"
#~ msgstr ""

#~ msgid "For a device to connect using TLS with Mosca, it must possess:"
#~ msgstr ""

#~ msgid "A key pair (.key file);"
#~ msgstr ""

#~ msgid ""
#~ "A certificate signed by a Certificate"
#~ " Authority (CA) trusted by Mosca "
#~ "(.crt file);"
#~ msgstr ""

#~ msgid "The certificate of this CA (.crt file);"
#~ msgstr ""

#~ msgid ""
#~ "An entry on Mosca Access Control "
#~ "List (ACL), allowing the device to "
#~ "publish on a specific topic;"
#~ msgstr ""

#~ msgid ""
#~ "When a device is created, DeviceManager"
#~ " will automatically notify the following"
#~ " components:"
#~ msgstr ""

#~ msgid ""
#~ "IoTAgent-Mosca: will register the new"
#~ " device on its internal cache and "
#~ "will create an entry on the ACL,"
#~ " allowing the device to publish on"
#~ " a specific topic."
#~ msgstr ""

#~ msgid ""
#~ "EJBCA: will create an end entity "
#~ "so a certificate can be created on"
#~ " the future."
#~ msgstr ""

#~ msgid "Components"
#~ msgstr ""

#~ msgid "EJBCA-REST"
#~ msgstr ""

#~ msgid ""
#~ "`EJBCA`_ is a complete Private Key "
#~ "Infrastructure (PKI) capable to manage "
#~ "CAs, cryptography keys and certificates. "
#~ "EJBCA provides a SOAP, web and a"
#~ " command line interface. EJBCA-REST "
#~ "is an wrapper on top of EJBCA "
#~ "that provides modern interfaces, like "
#~ "REST and Kafka."
#~ msgstr ""

#~ msgid ""
#~ "EJBCA provides SOAP, web and command "
#~ "line interfaces. EJBCA-REST is a "
#~ "wrapper on top of EJBCA that "
#~ "complements those, allowing the CA to"
#~ " be configured using REST. When used"
#~ " within dojot, it also listens to "
#~ "Kafka events, allowing its automatic "
#~ "configuration."
#~ msgstr ""

#~ msgid "What is a certificate?"
#~ msgstr ""

#~ msgid ""
#~ "A certificate contains the public key"
#~ " for an entity (a user, device, "
#~ "website), along with information about "
#~ "this entity, about the CA which "
#~ "signs the certificate, the allowed "
#~ "certificate usage and a checksum. When"
#~ " a entity wants a certificate to "
#~ "be signed, the entity should create "
#~ "a CSR file and send it to "
#~ "the desired CA. The CSR file is"
#~ " an 'intention of certification'. The "
#~ "file contains the information required "
#~ "from the entity and some information "
#~ "about the certificate use, hostnames and"
#~ " IPs where the certificate will "
#~ "reside, alternative names for the "
#~ "entity, etc. EJBCA can decide, using "
#~ "its configured policies, what information "
#~ "to keep, to discard and to "
#~ "overwrite of the received CSR. EJBCA "
#~ "can refuse to sign a CSR if "
#~ "it concludes that it is not safe"
#~ " enough according to its policies."
#~ msgstr ""

#~ msgid ""
#~ "These configurable policies are called "
#~ "'Certificate Profiles'. One Certificate "
#~ "profile named CFREE, specialized for "
#~ "MQTT TLS, is provided out of the"
#~ " box."
#~ msgstr ""

#~ msgid "In short, CFREE have the following configurations (and many more):"
#~ msgstr ""

#~ msgid "Cryptography keys must have between 2048 and 8192 bits;"
#~ msgstr ""

#~ msgid "Certificate expires in 730 days;"
#~ msgstr ""

#~ msgid "Entities can define hostnames and IPs;"
#~ msgstr ""

#~ msgid "Key usage is marked as not critical (for now);"
#~ msgstr ""

#~ msgid "The hash algorithm is SHA256. The sign algorithm is RSA."
#~ msgstr ""

#~ msgid "I have a CSR. How can I ask EJBCA to sign it for me?"
#~ msgstr ""

#~ msgid ""
#~ "Calm down! EJBCA will not allow "
#~ "strangers to ask for certification. You"
#~ " need to authenticate yourself. EJBCA "
#~ "use a username+password authentication system."
#~ " The term 'end entity' will be "
#~ "used to refer to EJBCA users to"
#~ " follow the terms on EJBCA "
#~ "documentation and to avoid ambiguities "
#~ "between EJBCA users and dojot users. "
#~ "An administrator should create the end"
#~ " entity. An entity that was just "
#~ "created has the state 'New' an can"
#~ " generate a certificate. After signing "
#~ "a certificate for an entity, the "
#~ "end entity's state changes to "
#~ "'Generated' and will no longer accept"
#~ " this username and password. EJBCA "
#~ "'End entities' can create only one "
#~ "certificate."
#~ msgstr ""

#~ msgid "So, how does EJBCA work in dojot?"
#~ msgstr ""

#~ msgid ""
#~ "When creating a new device, an "
#~ "associated end entity is created in "
#~ "EJBCA. Its name will be the "
#~ "device's ID (like '8fa3') and its "
#~ "password will be always 'dojot'."
#~ msgstr ""

#~ msgid ""
#~ "A certificate can be signed by "
#~ "sending a HTTP POST request to "
#~ "host:1234/sign/<cname>/pkcs10. CName is the "
#~ "end entity's name (or device). The "
#~ "payload sent with this request should"
#~ " be a JSON containing the end "
#~ "entity password and a CSR file "
#~ "(certificate intention) in base64 format."
#~ msgstr ""

#~ msgid ""
#~ "Note that the URL is 'routed' by"
#~ " the API gateway. As in other "
#~ "APIs in dojot, a JWT is needed."
#~ " You can find how to generate "
#~ "and how to use such token in "
#~ ":ref:`Using API interface`."
#~ msgstr ""

#~ msgid ""
#~ "In order to create the CSR file"
#~ " and ask for a certificate signature,"
#~ " a user can use a helper script"
#~ " called 'Certificate Retriever', which is"
#~ " detailed in `Certificate retriever`_ "
#~ "section."
#~ msgstr ""

#~ msgid "Mosca"
#~ msgstr ""

#~ msgid ""
#~ "Mosca is a node.js mqtt broker. To"
#~ " use the Mosca broker with TLS, "
#~ "you need to allow the broker to"
#~ " use TLS as the secure mode of"
#~ " connection. To do this, you need "
#~ "to declare the credentials and the "
#~ "secure attributes in the Mosca server"
#~ " conf object. You can enable the "
#~ "TLS via configuration variable."
#~ msgstr ""

#~ msgid ""
#~ "All the certificates will be created "
#~ "automatically, not needing to configure "
#~ "manually the certificates into the "
#~ "broker."
#~ msgstr ""

#~ msgid "MQTT configuration files"
#~ msgstr ""

#~ msgid "Checkout this commented MQTT configuration file:"
#~ msgstr ""

#~ msgid ""
#~ "Note that for all configuration updates,"
#~ " it is mandatory to restart Mosca "
#~ "broker or to send a SIGDUP signal"
#~ " to its process."
#~ msgstr ""

#~ msgid "Certificate retriever"
#~ msgstr ""

#~ msgid ""
#~ "This component is a helper script "
#~ "for device certificates creation. It is"
#~ " available at `Certificate Retriever GitHub"
#~ " repository`_ and it coded using "
#~ "Python 3."
#~ msgstr ""

#~ msgid "A user can use it by executing:"
#~ msgstr ""

#~ msgid "The mandatory parameters are:"
#~ msgstr ""

#~ msgid "HOST: where dojot is. Example: http://localhost:8000"
#~ msgstr ""

#~ msgid "DEVICE-NAME: device name that will get a new certificate. Example: ac32"
#~ msgstr ""

#~ msgid ""
#~ "CA: CA which will sign the "
#~ "certificate. Example: IOTmidCA (this is "
#~ "the CA name used in dojot)"
#~ msgstr ""

#~ msgid "Other options are:"
#~ msgstr ""

#~ msgid ""
#~ "-u or --username USERNAME: dojot's "
#~ "username. If this parameter is not "
#~ "specified here, it will be asked "
#~ "iteratively."
#~ msgstr ""

#~ msgid ""
#~ "-w or --overwrite: overwrites any "
#~ "certificate files or criptographic keys "
#~ "if already existent."
#~ msgstr ""

#~ msgid ""
#~ "-k or --key KEYLENGTH: size of the"
#~ " criptographic key being generated (in "
#~ "bits)."
#~ msgstr ""

#~ msgid ""
#~ "-d or --dns: Hostname where the "
#~ "certificate owner can be reached out."
#~ " Note that this has no relation "
#~ "with DNS (Domain Name System) servers"
#~ " - this name was kept because "
#~ "x509 certificates have an attribute that"
#~ " is called DNS."
#~ msgstr ""

#~ msgid "-i or --ip: same as -d, buto to specify IP address."
#~ msgstr ""

#~ msgid ""
#~ "--skip-https-check: if dojot accepts "
#~ "HTTPS connections but it has no "
#~ "valid certificate, then this option will"
#~ " allow the connection to be made."
#~ msgstr ""

#~ msgid ""
#~ "Note that authentication is performed in"
#~ " dojot. The script will ask for "
#~ "user credentials and will invoke user"
#~ " authentication automatically. The user "
#~ "needs permission for certificate signing "
#~ "to be able to use this script."
#~ msgstr ""

#~ msgid ""
#~ "An end entity must exist in EJBCA"
#~ " in 'New' state before asking for "
#~ "a new certificate signature. When a "
#~ "new device is created, an end "
#~ "entity is automatically created in EJBCA"
#~ " by DeviceManager. This new end "
#~ "entity's name is the device ID "
#~ "itself. Its password is 'dojot'."
#~ msgstr ""

#~ msgid ""
#~ "The script authenticates users with "
#~ "given username and password, retrieves "
#~ "CA certificate, generates a key pair "
#~ "as well as a CSR file and "
#~ "asks for certificate signature, in this"
#~ " order. Any error in any step "
#~ "will halt its execution."
#~ msgstr ""

#~ msgid ""
#~ "After successfully executed, all certificates"
#~ " can be found in './certs' folder."
#~ msgstr ""

#~ msgid "Quick Tutorial"
#~ msgstr ""

#~ msgid ""
#~ "To publish using the appropriated "
#~ "certificates, you must need to be "
#~ "with the Mosca Broker and the "
#~ "EJBCA running. After creating the dojot"
#~ " environment, the templates and the "
#~ "devices, use the mosquitto to publish"
#~ " in the desired topic:"
#~ msgstr ""

#~ msgid ""
#~ "The .crt, .key and the .cafile can"
#~ " be created with the `Certificate "
#~ "Retriever GitHub repository`_ script."
#~ msgstr ""

#~ msgid "Important Notes"
#~ msgstr ""

#~ msgid ""
#~ "These are a few but important "
#~ "notes related to device security and "
#~ "associated subjects."
#~ msgstr ""

#~ msgid "Debugging"
#~ msgstr ""

#~ msgid ""
#~ "TLS errors might be not so verbose"
#~ " as other problems. If an error "
#~ "occurrs, the user might not know "
#~ "what went wrong because no component "
#~ "indicates any problem. In this section"
#~ " there are some tips, frequent "
#~ "problems and debugging tools to find "
#~ "out what's happening."
#~ msgstr ""

#~ msgid "How to read a certificate"
#~ msgstr ""

#~ msgid ""
#~ "A certificate file can be in two"
#~ " formats: PEM (base64 text) or DER"
#~ " (binary). OpenSSL offers tools to "
#~ "read such formats:"
#~ msgstr ""

#~ msgid "How to verify if an entity is created in EJBCA"
#~ msgstr ""

#~ msgid ""
#~ "You can check if a entity (device)"
#~ " is created in the EJBCA by "
#~ "checking the EJBCA log:"
#~ msgstr ""

#~ msgid ""
#~ "in the example above, we created a"
#~ " device with id 3b987. After the "
#~ "device was created, the ejbca add "
#~ "the device has an entity."
#~ msgstr ""

#~ msgid "How to verify if a device has published in the topic"
#~ msgstr ""

#~ msgid ""
#~ "You can check if your device has"
#~ " successfully published into Mosca broker"
#~ " by checking the Mosca log:"
#~ msgstr ""

#~ msgid ""
#~ "if a message like this did not "
#~ "appear, there was probably a failure "
#~ "to authenticate the certificates. Try to"
#~ " recreate the certificates with the "
#~ "`Certificate Retriever GitHub repository`_ "
#~ "script."
#~ msgstr ""

