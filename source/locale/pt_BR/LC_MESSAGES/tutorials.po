# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, CPqD
# This file is distributed under the same license as the dojot package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
msgid ""
msgstr ""
"Project-Id-Version: dojot 0.2.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-04 16:39-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../source/tutorials.rst:2
msgid "Tutorials"
msgstr ""

#: ../../source/tutorials.rst:4
msgid ""
"The following tutorials show you how to use the core features of IoT "
"dojot Platform in an easy to follow way. Youâ€™ll learn how to manage MQTT "
"devices in the GUI, to use the Rest API to develop your own application "
"and to configure your business logic using the flow builder."
msgstr ""

#: ../../source/tutorials.rst:14
msgid ""
"There are also other tutorials (in portuguese only)  hosted outside the "
"Read The Docs that you can also use to learn more about dojot:"
msgstr ""

#~ msgid "Building an application"
#~ msgstr ""

#~ msgid ""
#~ "This tutorial will show how to "
#~ "build an application, using dojot's API"
#~ " interface."
#~ msgstr ""

#~ msgid "Who is this for: developers, solution architects"
#~ msgstr ""

#~ msgid "Level: intermediate"
#~ msgstr ""

#~ msgid "Reading time: X m"
#~ msgstr ""

#~ msgid "Using flow builder"
#~ msgstr ""

#~ msgid ""
#~ "This tutorial will show how to "
#~ "properly use flow builder to process "
#~ "messages and events generated by "
#~ "devices."
#~ msgstr ""

#~ msgid "Who is this for: entry-level users"
#~ msgstr ""

#~ msgid "Level: basic"
#~ msgstr ""

#~ msgid "Integrating physical devices"
#~ msgstr ""

#~ msgid "Who is this for: developers"
#~ msgstr ""

#~ msgid ""
#~ "If you want to integrate your "
#~ "device within dojot, it must be "
#~ "able to send messages to the "
#~ "platform. There are two ways to do"
#~ " that:"
#~ msgstr ""

#~ msgid ""
#~ "Use one of the available IoT "
#~ "agents: currently, there is support for"
#~ " MQTT-based devices. If your project"
#~ " is using (or allows changing to) "
#~ "this protocol, then it would suffice "
#~ "to check if the device is sending"
#~ " its data using a simple key/value"
#~ " JSON. If it isn't, then you "
#~ "might want to use iotagent-mosca "
#~ "(check `iotagent-mosca`_ documentation to "
#~ "check out how to do that). If "
#~ "it is indeed sending key/value JSON "
#~ "messages, then it can send its "
#~ "messages to dojot's broker and it "
#~ "will be recognized by the platform."
#~ msgstr ""

#~ msgid ""
#~ "Create a new IoT agent to support"
#~ " the protocol used by the device: "
#~ "if your device is using another "
#~ "protocol that is not yet supported, "
#~ "then it might be a good idea "
#~ "to implement a new IoT agent. It's"
#~ " not that hard, but there are a"
#~ " few details that must be taken "
#~ "into account. To help developers to "
#~ "do such thing, there is the "
#~ "`iotagent-nodejs`_ library which deals with"
#~ " most internal mechanisms and messages "
#~ "- check its documentation to know "
#~ "more."
#~ msgstr ""

#~ msgid "Simple device tracking"
#~ msgstr ""

#~ msgid ""
#~ "In this tutorial we will focus on"
#~ " how to track devices and how "
#~ "to use flows to perform specific "
#~ "actions when a device reaches a "
#~ "particular area. Furthermore, we will "
#~ "see a few more GUI functionalities "
#~ "not covered by `Using web interface`_."
#~ msgstr ""

#~ msgid ""
#~ "The scenario we'll build in this "
#~ "tutorial will be as follows: a "
#~ "truck is carrying a container from "
#~ "Campinas to Pouso Alegre and we "
#~ "want to be notified when it exits"
#~ " Campinas, when passes by Extrema and"
#~ " when it reaches its destination. The"
#~ " map is shown below to help you"
#~ " better visualize where everything is "
#~ "located."
#~ msgstr ""

#~ msgid ""
#~ "So, as done before, let's create a"
#~ " template with all necessary parameters "
#~ "and a new device based on it."
#~ msgstr ""

#~ msgid "<< insert youtube video here >>"
#~ msgstr ""

#~ msgid ""
#~ "Note the ``position`` attribute, which "
#~ "will hold the GPS position informed "
#~ "by the truck."
#~ msgstr ""

#~ msgid ""
#~ "In order to properly generate the "
#~ "notification, let's create a flow that"
#~ " sends a HTTP request to an "
#~ "external element and updates a virtual"
#~ " device which represents one package "
#~ "that its is carrying. Let's create "
#~ "the virtual device first."
#~ msgstr ""

#~ msgid "Let's create the flow."
#~ msgstr ""

#~ msgid ""
#~ "Note that we added ``geofence`` nodes"
#~ " which defines a circle that "
#~ "represents the area of interest."
#~ msgstr ""

#~ msgid "Tracking packages"
#~ msgstr ""

#~ msgid ""
#~ "This tutorial will show how to "
#~ "develop new pluggable modules to dojot"
#~ " to perform specific tasks. These "
#~ "modules are:"
#~ msgstr ""

#~ msgid "New nodes in flow palette (stateless procedures)"
#~ msgstr ""

#~ msgid "New modules in dojot (stateful procedures)"
#~ msgstr ""

#~ msgid ""
#~ "The scenario is: we have a courier"
#~ " delivery services company and we "
#~ "need to track individual packages. The"
#~ " current package tracking is based "
#~ "only on manually scanning each device's"
#~ " bar code at departure and arrival"
#~ " in distribution centers. What we "
#~ "want is a more fine-grained system"
#~ " that allows checking where a "
#~ "particular package is (or it should "
#~ "be) in the meantime."
#~ msgstr ""

#~ msgid ""
#~ "Each package is equipped with a "
#~ "RFID and all courier vehicules have "
#~ "RFID scanners, LTE connection and GPS."
#~ msgstr ""

#~ msgid "Level: advanced"
#~ msgstr ""

#~ msgid "Implementation details"
#~ msgstr ""

#~ msgid ""
#~ "The idea behind this is: associate "
#~ "each package to a vehicule and, "
#~ "whenever an update from the vehicule "
#~ "is received, this solution also updates"
#~ " all associated packages. The association"
#~ " could be done by the vehicule "
#~ "itself - each time a new device"
#~ " is registered by its RFID scanners,"
#~ " it sends a message to dojot "
#~ "indicating that the device is now "
#~ "associated to it. This message would "
#~ "be processed by a new software "
#~ "component (to be developed in this "
#~ "tutorial) that performs this association, "
#~ "as currently there is no module "
#~ "responsible for \"device associations\". When"
#~ " a vehicule sends a new location, "
#~ "this update is also processed by "
#~ "the association module, which in turn"
#~ " will update the location from all"
#~ " associated packages."
#~ msgstr ""

#~ msgid "Using API interface"
#~ msgstr ""

#~ msgid ""
#~ "This section provides a complete "
#~ "step-by-step tutorial of how to "
#~ "create, update, send messages to and "
#~ "check historical data of a device. "
#~ "Also, this tutorial assumes that you "
#~ "are using `docker-compose`_, which has"
#~ " all the necessary components to "
#~ "properly run dojot."
#~ msgstr ""

#~ msgid "Audience: developers"
#~ msgstr ""

#~ msgid "Reading time: 15 m"
#~ msgstr ""

#~ msgid "Getting access token"
#~ msgstr ""

#~ msgid ""
#~ "As said in :ref:`User authentication`, "
#~ "all requests must contain a valid "
#~ "access token. You can generate a "
#~ "new token by sending the following "
#~ "request:"
#~ msgstr ""

#~ msgid ""
#~ "If you want to generate a token"
#~ " for other user, just change the "
#~ "username and password in the request "
#~ "payload. The token (\"eyJ0eXAiOiJKV1QiL...\") "
#~ "should be used in every HTTP "
#~ "request sent to dojot in a special"
#~ " header. Such request would look "
#~ "like:"
#~ msgstr ""

#~ msgid ""
#~ "Remember that the token must be "
#~ "set in the request header as a "
#~ "whole, not parts of it. In the "
#~ "example only the first characters are"
#~ " shown for the sake of simplicity."
#~ " All further requests will use an "
#~ "evironment variable called ``bash ${JWT}``,"
#~ " which contains the token got from"
#~ " auth component."
#~ msgstr ""

#~ msgid "Device creation"
#~ msgstr ""

#~ msgid ""
#~ "In order to properly configure a "
#~ "physical device in dojot, you must "
#~ "first create its representation in the"
#~ " platform. The example presented here "
#~ "is just a small part of what "
#~ "is offered by DeviceManager. For more"
#~ " information, check the `DeviceManager "
#~ "how-to`_ for more detailed instructions."
#~ msgstr ""

#~ msgid ""
#~ "First of all, let's create a "
#~ "template for the device - all "
#~ "devices are based off of a "
#~ "template, remember."
#~ msgstr ""

#~ msgid "This request should give back this message:"
#~ msgstr ""

#~ msgid "Note that the template ID is 1 (line 27)."
#~ msgstr ""

#~ msgid "To create a template based on it, send the following request to dojot:"
#~ msgstr ""

#~ msgid ""
#~ "The template ID list on line 6 "
#~ "contains the only template ID configured"
#~ " so far. To check out the "
#~ "configured device, just send a GET "
#~ "request to /device:"
#~ msgstr ""

#~ msgid "Which should give back:"
#~ msgstr ""

#~ msgid "Sending messages"
#~ msgstr ""

#~ msgid ""
#~ "So far we got an access token "
#~ "and created a template and a "
#~ "device based on it. In an actual"
#~ " deployment, the physical device would "
#~ "send messages to dojot with all "
#~ "its attributes and their current values."
#~ " For this tutorial we will send "
#~ "MQTT messages by hand to the "
#~ "platform, emulating such physical device. "
#~ "For that, we will use mosquitto_pub "
#~ "from Mosquitto project."
#~ msgstr ""

#~ msgid ""
#~ "Some Linux distributions, Ubuntu in "
#~ "particular, have two packages for "
#~ "`mosquitto`_ - one containing tools to"
#~ " access it (i.e. mosquitto_pub and "
#~ "mosquitto_sub for publishing messages and "
#~ "subscribing to topics) and another one"
#~ " containing the MQTT broker. In this"
#~ " tutorial, only the tools are going"
#~ " to be used. Please check if "
#~ "MQTT broker is not running before "
#~ "starting dojot (by running commands like"
#~ " ``ps aux | grep mosquitto``)."
#~ msgstr ""

#~ msgid ""
#~ "The default message format used by "
#~ "dojot is a simple key-value JSON"
#~ " (you could translate any message "
#~ "format to this scheme using flows, "
#~ "though), such as:"
#~ msgstr ""

#~ msgid "Let's send this message to dojot:"
#~ msgstr ""

#~ msgid "If there is no output, the message was sent to MQTT broker."
#~ msgstr ""

#~ msgid ""
#~ "As noted in the :doc:`../faq/faq`, there"
#~ " are some considerations regarding MQTT "
#~ "topics:"
#~ msgstr ""

#~ msgid ""
#~ "You can set the device ID that "
#~ "originates the message using the "
#~ "``client-id`` MQTT parameter. It should "
#~ "follow the following pattern: "
#~ "``<service>:<deviceid>``, such as ``admin:efac``."
#~ msgstr ""

#~ msgid ""
#~ "If you can't do such thing, then"
#~ " the device should set its ID "
#~ "using the topic used to publish "
#~ "messages. The topic should assume the"
#~ " pattern ``/<service-id>/<device-id>/attrs`` "
#~ "(for instance: ``/admin/efac/attrs``)."
#~ msgstr ""

#~ msgid ""
#~ "If you do define a topic in "
#~ "device template, then your device should"
#~ " publish its data to it and set"
#~ " the client-id parameter."
#~ msgstr ""

#~ msgid ""
#~ "MQTT payload must be a JSON with"
#~ " each key being an attribute of "
#~ "the dojot device, such as:"
#~ msgstr ""

#~ msgid ""
#~ "For more information on how dojot "
#~ "deals with data sent from devices, "
#~ "check the :doc:`integrating-physical-devices`"
#~ " tutorial. There you can find how "
#~ "to deal with devices that don't "
#~ "publish messages in such format and "
#~ "how to translate them."
#~ msgstr ""

#~ msgid "Checking historical data"
#~ msgstr ""

#~ msgid ""
#~ "In order to check all values that"
#~ " were sent from a device for a"
#~ " particular attribute, you could use "
#~ "the `history APIs`_. Let's first send"
#~ " a few other values to dojot so"
#~ " we can get a few more "
#~ "interesting results:"
#~ msgstr ""

#~ msgid "To retrieve all values sent for temperature attribute of this device:"
#~ msgstr ""

#~ msgid "The history endpoint is built from these values:"
#~ msgstr ""

#~ msgid ""
#~ "``.../device/3bb9/...``: the device ID is "
#~ "``3bb9`` - this is retrieved from "
#~ "the ``id`` attribute from the device"
#~ msgstr ""

#~ msgid ""
#~ "``.../history?lastN=3&attr=temperature``: the requested"
#~ " attribute is temperature and it "
#~ "should get the last 3 values. More"
#~ " operators are available in `history "
#~ "APIs`_."
#~ msgstr ""

#~ msgid "The request should result in the following message:"
#~ msgstr ""

#~ msgid "This message contains all previously sent values."
#~ msgstr ""

#~ msgid "Using web interface"
#~ msgstr ""

#~ msgid ""
#~ "This tutorial will show how to do"
#~ " basic operations in dojot, such as"
#~ " creating devices, checking its attributes"
#~ " and creating flows."
#~ msgstr ""

#~ msgid "Reading time: 15m"
#~ msgstr ""

#~ msgid "Device management"
#~ msgstr ""

#~ msgid ""
#~ "This section will show how to "
#~ "manage device. For this tutorial we "
#~ "will show how to add two "
#~ "thermometers and a virtual device that"
#~ " will represent an alarm system that"
#~ " will monitor both sensors."
#~ msgstr ""

#~ msgid ""
#~ "As described in :ref:`Concepts`, all "
#~ "devices are based on a template. "
#~ "To create one, you should access "
#~ "the template tab at the left and"
#~ " then create one new template, as "
#~ "shown below."
#~ msgstr ""

#~ msgid ""
#~ "Now we have one template from "
#~ "which devices can be \"instantiated\". "
#~ "All devices based on it will "
#~ "accept messages via MQTT that are "
#~ "sent to \"/devices/thermometers\" topic. To"
#~ " create new devices, you should go"
#~ " back to the devices tab and "
#~ "create a new device, selecting the "
#~ "templates it will be based on, as"
#~ " shown below."
#~ msgstr ""

#~ msgid ""
#~ "Note that, when you select the "
#~ "template in the right panel at "
#~ "device creation screen, all attributes "
#~ "are inherited from that device. You "
#~ "could add more templates as needed, "
#~ "keeping in mind that templates used "
#~ "to compose a device must not share"
#~ " an attribute with the same name."
#~ msgstr ""

#~ msgid ""
#~ "As devices are tightly associated to "
#~ "templates, if you want to remove a"
#~ " template, you should remove all its"
#~ " associated devices first. If such "
#~ "thing happens the following error "
#~ "message will appear:"
#~ msgstr ""

#~ msgid ""
#~ "You can add and remove attributes "
#~ "from templates and they will be "
#~ "immediately available to devices. In "
#~ "case of new attributes being added, "
#~ "though, you should keep in mind "
#~ "that there must not be any device"
#~ " with templates which have attributes "
#~ "with same name. If such thing "
#~ "happens, the following message will "
#~ "appear:"
#~ msgstr ""

#~ msgid ""
#~ "This snapshot was generated by creating"
#~ " a new template (``ExtraTemplate``) with"
#~ " one attribute, called ``level``. Then "
#~ "a new device based on both "
#~ "templates was created and, afterwards a"
#~ " new attribute also called ``level`` "
#~ "was added to ``ThermTemplate``."
#~ msgstr ""

#~ msgid ""
#~ "When this happens, no modification is"
#~ " applied to the template (no "
#~ "attribute named \"level\" related to the"
#~ " \"ThermTemplate\" is created). However, it"
#~ " remains in the template card so "
#~ "the user can figure out what is"
#~ " happening. If the user refreshes the"
#~ " page, it will be reverted to "
#~ "what it was before the modification."
#~ msgstr ""

#~ msgid ""
#~ "Now the physical devices can send "
#~ "messages to dojot. There are few "
#~ "things to pay attention to: as we"
#~ " defined the MQTT topic (all devices"
#~ " will send to ``/devices/thermometer`` "
#~ "topic), the devices must identify "
#~ "themselves using the ``client-id`` "
#~ "parameter from MQTT protocol. Another "
#~ "way of doing that is to just "
#~ "use the default topic scheme (which "
#~ "is ``/{SERVICE}/{DEVICE_ID}/attrs``."
#~ msgstr ""

#~ msgid ""
#~ "Just for the sake of simplicity, "
#~ "we'll emulate one device using "
#~ "mosquitto_pub tool. We set the "
#~ "``client-id`` parameter by using the "
#~ "``-i`` flag of mosquitto_pub."
#~ msgstr ""

#~ msgid ""
#~ "Now that we've created the sensors, "
#~ "let's create a virtual one. This "
#~ "will be the representation of a "
#~ "alarm system that will be triggered "
#~ "whenever something bad is detected to"
#~ " these sensors. Let's say they are"
#~ " installed in a kitchen. So it "
#~ "is expected that their temperature "
#~ "readings will be no more than 40C."
#~ " If it is more than that, our"
#~ " simple detection system will conclude "
#~ "that the kitchen is on fire. This"
#~ " alarm representation will have two "
#~ "attributes: one for a severity level "
#~ "for a particular alarm and another "
#~ "one for a textual message, so that"
#~ " the user is properly informed of "
#~ "what's happening."
#~ msgstr ""

#~ msgid ""
#~ "Just as for \"regular devices\", virtual"
#~ " devices also are based on templates."
#~ " So, let's create one, as shown "
#~ "below."
#~ msgstr ""

#~ msgid "Flow configuration"
#~ msgstr ""

#~ msgid ""
#~ "Once we've created the virtual device,"
#~ " we can add a flow to implement"
#~ " the logic behind the alarm "
#~ "generation. The idea is: if the "
#~ "temperature reading is less than 40, "
#~ "then the alarm system will be "
#~ "updated with a notification of severity"
#~ " 4 (mildly important) and a message"
#~ " indicating that the kitchen is OK."
#~ " Otherwise, if the temperature is "
#~ "higher than 40, then a notification "
#~ "is sent with severity 1 (highest "
#~ "severity) and a message indicating that"
#~ " the kitchen is on fire. This "
#~ "is done as shown belown."
#~ msgstr ""

#~ msgid ""
#~ "Note that the \"change\" nodes have "
#~ "a reference to an \"output\" entity. "
#~ "This can be thought as a simple"
#~ " data structure - it will have "
#~ "a ``message`` and a ``severity`` "
#~ "attributes that match those from the "
#~ "virtual device. This \"object\" is "
#~ "referenced in the output node as a"
#~ " data source for the device to "
#~ "be updated (in this case, the "
#~ "virtual device we've created). In other"
#~ " words, you can think of this "
#~ "as a piece of information carried "
#~ "from \"change\" nodes to the \"virtual"
#~ " device\" with names \"msg.output.message\" "
#~ "and \"msg.output.severity\", where \"message\" "
#~ "and \"severity\" are the virtual device"
#~ " attributes."
#~ msgstr ""

#~ msgid ""
#~ "So, let's send a few more messages"
#~ " and see what will happen to "
#~ "that virtual device."
#~ msgstr ""

#~ msgid ""
#~ "If you are interested on how to"
#~ " use the data generated by these "
#~ "devices in your application, check the"
#~ " :ref:`Building an application` tutorial."
#~ msgstr ""

#~ msgid ""
#~ "The following tutorials show you how "
#~ "to use the core features of IoT"
#~ " dojot Platform in an easy to "
#~ "follow way. Youâ€™ll learn how to "
#~ "manage MQTT devices in the GUI, to"
#~ " use the Rest API to develop "
#~ "your own application and to configure"
#~ " your business logic using the Flow"
#~ " Broker."
#~ msgstr ""

#~ msgid "IntroduÃ§Ã£o Ã  plataforma dojot - InstalaÃ§Ã£o e configuraÃ§Ã£o"
#~ msgstr ""

#~ msgid "SimulaÃ§Ã£o de dispositivos na plataforma dojot"
#~ msgstr ""

#~ msgid "Configurando fluxos de processamento de dados da plataforma dojot"
#~ msgstr ""

#~ msgid "Configurando conexÃ£o segura com o uso de TLS na plataforma dojot"
#~ msgstr ""

#~ msgid "Trocando informaÃ§Ãµes com uma Raspberry Pi e plataforma dojot"
#~ msgstr ""

